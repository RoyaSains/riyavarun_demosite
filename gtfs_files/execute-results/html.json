{
  "hash": "b85e71b22c1e62fa4df950f285060132",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Mapping Transit\"\nauthor: \"Varun Bhakhri, Riya Saini\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\n\n\n\n\n## **Mapping Transit Network**\n\n::: {#1c450f62 .cell execution_count=1}\n``` {.python .cell-code}\n#Load Packages:\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport osmnx as ox\nimport shapely\nfrom shapely.geometry import Point\nimport folium\nfrom folium import Choropleth\n```\n:::\n\n\n### Load and Inspect GTFS data for Philadelphia\n\nWe utilized the General Transit Feed Specification (GTFS), a standardized data format that provides public transportation schedules and associated network information, to extract SEPTA bus stop locations and stop times at each stop. We simultaneously, also import the bus network for the region and clip it to Philadelphia Metropolitan Area city limits for our analysis.\n\n::: {#037a744a .cell execution_count=2}\n``` {.python .cell-code}\n#Load GTFS Data:\n\ngtfs_folder = \"Data/google_bus_Fall 2023\"\n\n# Dictionary to store dataframes for each GTFS file\ngtfs_dataframes = {}\n\n# Loop through all files in the folder\nfor file_name in os.listdir(gtfs_folder):\n    # Check if the file is a .txt file\n    if file_name.endswith(\".txt\"):\n        file_path = os.path.join(gtfs_folder, file_name)\n        try:\n            # Read the .txt file into a Pandas DataFrame\n            dataframe_name = file_name.replace(\".txt\", \"\")\n            gtfs_dataframes[dataframe_name] = pd.read_csv(file_path)\n            print(f\"Imported {file_name} as '{dataframe_name}' with {len(gtfs_dataframes[dataframe_name])} rows.\")\n        except Exception as e:\n            print(f\"Failed to load {file_name}: {e}\")\n\nprint(f\"Loaded DataFrames: {list(gtfs_dataframes.keys())}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImported agency.txt as 'agency' with 1 rows.\nImported calendar.txt as 'calendar' with 21 rows.\nImported calendar_dates.txt as 'calendar_dates' with 140 rows.\nImported fare_attributes.txt as 'fare_attributes' with 10 rows.\nImported fare_rules.txt as 'fare_rules' with 15 rows.\nImported routes.txt as 'routes' with 167 rows.\nImported shapes.txt as 'shapes' with 536093 rows.\nImported stops.txt as 'stops' with 13801 rows.\nImported stop_times.txt as 'stop_times' with 2975534 rows.\nImported transfers.txt as 'transfers' with 8 rows.\nImported trips.txt as 'trips' with 49558 rows.\nLoaded DataFrames: ['agency', 'calendar', 'calendar_dates', 'fare_attributes', 'fare_rules', 'routes', 'shapes', 'stops', 'stop_times', 'transfers', 'trips']\n```\n:::\n:::\n\n\n::: {#340198cc .cell execution_count=3}\n``` {.python .cell-code}\n# Extract relevant files as dataframes\n\nstops_df = gtfs_dataframes.get(\"stops\", None)\nstop_times_df = gtfs_dataframes.get(\"stop_times\", None)\nroutes_df = gtfs_dataframes.get(\"routes\", None)\nshapes_df = gtfs_dataframes.get(\"shapes\", None)\n\n# view files\nstops_df.head()\nshapes_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>shape_id</th>\n      <th>shape_pt_lat</th>\n      <th>shape_pt_lon</th>\n      <th>shape_pt_sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>286406</td>\n      <td>39.976568</td>\n      <td>-75.196097</td>\n      <td>206</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>286406</td>\n      <td>40.006143</td>\n      <td>-75.196839</td>\n      <td>417</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>286406</td>\n      <td>40.006429</td>\n      <td>-75.197471</td>\n      <td>420</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>286410</td>\n      <td>39.985246</td>\n      <td>-75.208209</td>\n      <td>294</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>286410</td>\n      <td>39.986857</td>\n      <td>-75.207831</td>\n      <td>307</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#bd992204 .cell execution_count=4}\n``` {.python .cell-code}\nfrom shapely.geometry import LineString\n\n# Ensure the DataFrame is sorted by shape_id and shape_pt_sequence\nshapes_df = shapes_df.sort_values(by=['shape_id', 'shape_pt_sequence'])\n\n# Group by shape_id and create LineString for each group\nlines = (\n    shapes_df.groupby('shape_id')\n    .apply(lambda group: LineString(zip(group['shape_pt_lon'], group['shape_pt_lat'])))\n    .reset_index(name='geometry')\n)\n\n# Create a GeoDataFrame from the lines\nbus_network = gpd.GeoDataFrame(lines, geometry='geometry', crs='EPSG:4326')\n\nbus_network.plot()\n\n# Add city boundary:\ncity_boundary = ox.geocode_to_gdf(\"Philadelphia, Pennsylvania, USA\")\n\n# Trim Bus network\nbus_network_philadelphia = gpd.clip(bus_network, city_boundary)\n\nbus_network_philadelphia.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-5-output-1.png){width=579 height=370}\n:::\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-5-output-2.png){width=432 height=416}\n:::\n:::\n\n\n### Bus Frequency at Bus Stops\n\nBy aggregating this data, we estimated the daily arrivals at each bus stop, effectively quantifying the daily traffic across the network. The distribution, as illustrated in the bar plot below, reveals that while a small number of stops experience exceptionally high traffic exceeding 2,000 buses per day (likely transit interchange hubs), the majority of bus stops accommodate approximately 183 buses daily.\n\n::: {#ed6af934 .cell execution_count=5}\n``` {.python .cell-code}\ndaily_buses = stop_times_df.groupby([\"stop_id\"]).size().reset_index(name=\"daily_arrivals\")\n\ndaily_buses_sorted = daily_buses.sort_values(by=\"daily_arrivals\", ascending=False).reset_index(drop=True)\n\ndaily_buses_sorted.head()\n\nplt.figure(figsize=(8, 6))\n\n# Create histogram \nplt.hist(\n    daily_buses[\"daily_arrivals\"],\n    bins=range(0, daily_buses[\"daily_arrivals\"].max() + 100, 100),  # Adjust bins\n    edgecolor=\"black\",\n    align=\"left\"\n)\n\nplt.title(\"Distribution of Bus Stops by Total Daily Bus Arrivals\", fontsize=16)\nplt.xlabel(\"Number of Daily Bus Arrivals\", fontsize=12)\nplt.ylabel(\"Number of Bus Stops\", fontsize=12)\n\nplt.xticks(range(0, daily_buses[\"daily_arrivals\"].max() + 400, 400))\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-6-output-1.png){width=689 height=530}\n:::\n:::\n\n\n### Total Arrivals and Peak Period\n\nThe data was subsequently grouped by each hour of the day to analyze the temporal distribution of bus service. The bar chart below illustrates the hourly distribution, revealing two distinct periods of heightened bus frequency: between 7 AM and 8 AM, and from 3 PM to 6 PM, with consistently elevated service levels during the midday hours. Bus frequency gradually declines after 8 PM until 5 AM. For the purpose of this analysis, the 3 PM to 6 PM window is designated as the peak period due to its sustained high frequency and significance in transit operations.\n\n::: {#cde3da79 .cell execution_count=6}\n``` {.python .cell-code}\nstop_times_df[\"hour\"] = stop_times_df[\"arrival_time\"].str.slice(0, 2).astype(int)\n\n# Group by trip_id and hour, and count rows\nhourly_bus_arrivals = stop_times_df.groupby([\"stop_id\", \"hour\"]).size().reset_index(name=\"hourly_arrivals\")\n\nhourly_bus_arrivals_sorted = hourly_bus_arrivals.sort_values(by=\"hourly_arrivals\", ascending=False).reset_index(drop=True)\n\nhourly_bus_arrivals_sorted.head()\n\n# Find number of buses per hour on the entire system to determine peak period:\n\ntotal_hourly_buses = stop_times_df.groupby([\"hour\"]).size().reset_index(name=\"total_bus_arrivals\")\n\ntotal_hourly_buses = total_hourly_buses[total_hourly_buses[\"hour\"] <= 24]\n\ntotal_hourly_buses = total_hourly_buses.sort_values(by=\"total_bus_arrivals\", ascending=False).reset_index(drop=True)\n\ntotal_hourly_buses.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hour</th>\n      <th>total_bus_arrivals</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16</td>\n      <td>188679</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15</td>\n      <td>187335</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>17</td>\n      <td>184023</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>177282</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8</td>\n      <td>176510</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cdfcd3b2 .cell execution_count=7}\n``` {.python .cell-code}\n# plot histogram of peak period\nplt.figure(figsize=(10, 6))\nplt.bar(total_hourly_buses[\"hour\"], total_hourly_buses[\"total_bus_arrivals\"], edgecolor=\"black\")\n\nplt.title(\"Total Bus Arrivals by Hour\", fontsize=16)\nplt.xlabel(\"Hour\", fontsize=12)\nplt.ylabel(\"Total Daily Bus Arrivals\", fontsize=12)\nplt.xticks(total_hourly_buses[\"hour\"])  \nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-8-output-1.png){width=844 height=530}\n:::\n:::\n\n\n### Frequency and Headway\n\nIn transit planning, frequency refers to the number of buses servicing a particular stop within a given time frame, typically measured as buses per hour. It is a critical metric for understanding the level of service provided by a transit network, as higher frequency generally translates to shorter wait times for passengers and improved overall service reliability. In this analysis, frequency is calculated by determining the number of bus arrivals at each stop during specified time periods (3 PM to 6 PM).\n\n::: {#587cee9d .cell execution_count=8}\n``` {.python .cell-code}\npeak_bus_arrivals = hourly_bus_arrivals[hourly_bus_arrivals[\"hour\"].isin([3, 4, 5])]\n\npeak_frequency = peak_bus_arrivals.groupby(\"stop_id\", as_index=False)[\"hourly_arrivals\"].sum()\n\npeak_frequency = peak_frequency.rename(columns={\"hourly_arrivals\": \"bus_arrivals\"})\n\n# Create a new column 'frequency'\npeak_frequency[\"frequency\"] = peak_frequency[\"bus_arrivals\"] / 3\n\npeak_frequency.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>stop_id</th>\n      <th>bus_arrivals</th>\n      <th>frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>23</td>\n      <td>7.666667</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>46</td>\n      <td>15.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>37</td>\n      <td>12.333333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>6</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8</td>\n      <td>66</td>\n      <td>22.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAdditionally, headways—the time interval between consecutive buses at a stop—are directly derived from frequency. It directly impacts passenger experience, as shorter headways result in reduced waiting times and greater convenience, particularly during peak periods when demand is highest. Here, we first calculate the number of bus arrivals at a stop during peak period. After getting the per hour frequency, we calculate the headway at a bus stop by dividing 60 minutes. On an average the headway is 30 minutes.\n\n::: {#5c57776d .cell execution_count=9}\n``` {.python .cell-code}\n# Calculate the headway and assign it to a new column\npeak_frequency[\"headway\"] = 60 / peak_frequency[\"frequency\"]\n\npeak_frequency = peak_frequency.sort_values(by=\"headway\", ascending=True).reset_index(drop=True)\nprint(peak_frequency)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      stop_id  bus_arrivals  frequency     headway\n0       10266           231  77.000000    0.779221\n1         283           194  64.666667    0.927835\n2        1148           176  58.666667    1.022727\n3       31564           166  55.333333    1.084337\n4         341           111  37.000000    1.621622\n...       ...           ...        ...         ...\n9981    27732             1   0.333333  180.000000\n9982    22380             1   0.333333  180.000000\n9983    22370             1   0.333333  180.000000\n9984    22388             1   0.333333  180.000000\n9985    18183             1   0.333333  180.000000\n\n[9986 rows x 4 columns]\n```\n:::\n:::\n\n\n### Ridership\n\nWe then merge the ridership at each stop to our existing dataset containing frequency and headway.\n\n::: {#420c25c6 .cell execution_count=10}\n``` {.python .cell-code}\npeak_metrics = pd.merge(peak_frequency, stops_df, on=\"stop_id\", how=\"inner\")\nridership = pd.read_csv(\"Data/Fall_2023_Stop_Summary_(Bus).csv\")\n\nridership[\"Ridership\"] = ridership[\"Weekday_On\"] + ridership[\"Weekday_Of\"]\n\nridership.rename(columns={\"Stop_Code\": \"stop_id\"}, inplace=True)\n\nridership_by_stop = ridership.groupby(\"stop_id\")[\"Ridership\"].sum().reset_index()\n\nridership_by_stop.head()\n\n#Merge Ridership and Schedules\n\npeak_metrics = pd.merge(peak_metrics, ridership_by_stop, on=\"stop_id\", how=\"inner\")\nprint(peak_metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      stop_id  bus_arrivals  frequency     headway  \\\n0       10266           231  77.000000    0.779221   \n1        1148           176  58.666667    1.022727   \n2       31564           166  55.333333    1.084337   \n3         341           111  37.000000    1.621622   \n4         841           103  34.333333    1.747573   \n...       ...           ...        ...         ...   \n9140    27732             1   0.333333  180.000000   \n9141    22380             1   0.333333  180.000000   \n9142    22370             1   0.333333  180.000000   \n9143    22388             1   0.333333  180.000000   \n9144    18183             1   0.333333  180.000000   \n\n                                         stop_name   stop_lat   stop_lon  \\\n0                              Market St & 15th St  39.952547 -75.165475   \n1     69th St Transportation Center South Terminal  39.962079 -75.258284   \n2                         15th St & Market St - FS  39.952493 -75.165393   \n3               Richmond St & Westmoreland St Loop  39.984253 -75.099553   \n4                  Fern Rock Transportation Center  40.041940 -75.136970   \n...                                            ...        ...        ...   \n9140                State Rd & Pennypack St - MBFS  40.043558 -74.998562   \n9141                Bustleton Av & Scotchbrook Dr   40.082637 -75.040538   \n9142                        Welsh Rd & Michael Rd   40.063238 -75.028130   \n9143                      Alburger Av & Verree Rd   40.094735 -75.050601   \n9144                    Washington Ln & Chew -MBNS  40.051825 -75.172181   \n\n      location_type  parent_station  zone_id  wheelchair_boarding  Ridership  \n0               NaN             NaN        1                    1       2848  \n1               NaN         31034.0        1                    1       4758  \n2               NaN             NaN        1                    1        539  \n3               NaN             NaN        1                    1        222  \n4               NaN             NaN        1                    1       1509  \n...             ...             ...      ...                  ...        ...  \n9140            NaN             NaN        1                    1          0  \n9141            NaN             NaN        1                    1          2  \n9142            NaN             NaN        1                    1         14  \n9143            NaN             NaN        1                    1         16  \n9144            NaN             NaN        1                    1         12  \n\n[9145 rows x 12 columns]\n```\n:::\n:::\n\n\nOur analysis aimed to determine whether higher frequency (or shorter headways) correlates with greater ridership. While ridership and frequency exhibit a positive correlation, the presence of many outliers highlights the need for a combined analysis of both variables. This is crucial for identifying streets that would benefit most from improvements such as bus lanes, and it suggests that increasing frequency may be necessary to better accommodate the current ridership levels.\n\n::: {#dd957038 .cell execution_count=11}\n``` {.python .cell-code}\nimport numpy as np\n\n# keep numeric\npeak_metrics_cleaned = peak_metrics.dropna(subset=['frequency', 'Ridership'])\nx = peak_metrics_cleaned['frequency']\ny = peak_metrics_cleaned['Ridership']\n\n# Fit a linear regression model\ncoefficients = np.polyfit(x, y, 1)  \ntrendline = np.poly1d(coefficients)\n\n# Create scatterplot\nplt.figure(figsize=(8, 6))\nplt.scatter(x, y, alpha=0.7, label='Data')\nplt.plot(x, trendline(x), color='red', linestyle='--', label='Trend Line')\n\nplt.title('Scatterplot of Frequency vs Ridership with Trend Line', fontsize=16)\nplt.xlabel('Frequency', fontsize=12)\nplt.ylabel('Ridership', fontsize=12)\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-12-output-1.png){width=681 height=530}\n:::\n:::\n\n\nThis presumption is supported by the scatter-plot below, which reveals that stops with extremely high ridership are concentrated near the origin, corresponding to headways of under 25 minutes. We can also see that areas with greater headways have their ridership closer to origin well- suggesting lower ridership demand.\n\n::: {#eb3ba628 .cell execution_count=12}\n``` {.python .cell-code}\n# Scatterplot: Ridership vs. Headway\nplt.figure(figsize=(10, 6))\n\nplt.scatter(\n    peak_metrics[\"headway\"],\n    peak_metrics[\"Ridership\"],\n    c=\"blue\",\n    alpha=0.4,)\n\nplt.title(\"Scatterplot: Ridership vs. Headway\", fontsize=16)\nplt.xlabel(\"Headway (minutes)\", fontsize=12)\nplt.ylabel(\"Ridership\", fontsize=12)\nplt.grid(alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-13-output-1.png){width=951 height=566}\n:::\n:::\n\n\n### Level of Service Analysis\n\nTo better understand the spatial distribution of bus network, we first clipped the network to city limits.\n\n::: {#2bb3d6b3 .cell execution_count=13}\n``` {.python .cell-code}\ngeometry = [Point(xy) for xy in zip(peak_metrics[\"stop_lon\"], peak_metrics[\"stop_lat\"])]\npeak_metrics_geo = gpd.GeoDataFrame(peak_metrics, geometry=geometry)\n\n# Set a Coordinate Reference System (CRS)\npeak_metrics_geo.set_crs(epsg=4326, inplace=True)  # WGS84 CRS\n\npeak_metrics_geo.head()\n\npeak_metrics_geo = gpd.clip(peak_metrics_geo, city_boundary)\n```\n:::\n\n\nTo evaluate the level of service across Philadelphia and understand user patterns, we visualized three key components—frequency, headway, and ridership—on a map for peak periods. The map reveals that most areas in the city benefit from frequent bus services, with frequency under 10 during peak times and averaging below 20 minutes headway across the day. However, there are extreme outliers in some regions, where headway exceed 180 minutes, highlighting disparities in service provision. By adding a geographic component, we observe a more nuanced distribution of ridership across Philadelphia. As expected, areas in Center City exhibit high ridership and frequent bus service. Conversely, far-flung areas such as Upper Northwest and Lower Northwest show lower ridership levels and greater headway. Interestingly, Lower Northeast stands out with the highest ridership of all districts.\n\nInterestingly, while frequency and headway vary significantly across the city, ridership appears more evenly distributed, with notable exceptions in Center City, which experiences concentrated high ridership, and the Lower Northwest, near Mt. Airy, which shows higher ridership despite longer headway.\n\n::: {#a25c6767 .cell execution_count=14}\n``` {.python .cell-code}\nimport ipywidgets as widgets\n\n# create function\ndef create_map(selected_metric):\n    fig, ax = plt.subplots(figsize=(10, 8))\n    philly_peak_headways_ridership_geo.plot(\n        ax=ax,\n        column=selected_metric, \n        cmap=\"plasma\",            \n        legend=True,              \n        markersize=2)\n    \n    \n    plt.title(f\"{selected_metric.capitalize()} by Bus Stop\", fontsize=16)\n    plt.xlabel(\"Longitude\")\n    plt.ylabel(\"Latitude\")\n    plt.show()\n\ndropdown = widgets.Dropdown(\n    options=['frequency', 'headway', 'Ridership'],  \n    value='frequency',\n    description='Metric:',)\n\nwidgets.interactive(create_map, selected_metric=dropdown)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"15a52a7e33e64afa8a8cb857abd1896f\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-15-output-2.png){width=804 height=638}\n:::\n:::\n\n\n### Bus Routes Analysis\n\n#### Spatial Join: Bus Stops to Bus Network\n\nTill now we were looking at transit data at a point, however to understand what routes generate the most traffic and what routes to prioritze, we need to look at the data at street level. To achieve this, we joined the bus stops to the bus network, ensuring that each point is associated with the nearest street segment. The bar chart below confirms the accuracy of this process, showing that the majority of bus stops are linked to a single street segment within a 10-meter distance, indicating a high level of spatial alignment between stops and the street network.\n\n::: {#5f9a4de7 .cell execution_count=15}\n``` {.python .cell-code}\n# Check CRS\npeak_metrics_geo = peak_metrics_geo.to_crs(\"EPSG: 2272\")\nbus_network_philadelphia = bus_network_philadelphia.to_crs(\"EPSG: 2272\")\n\npeak_metrics_geo = peak_metrics_geo.reset_index(drop=True)\n\n# Perform a spatial join to find the nearest road segment\npeak_metrics_network = gpd.sjoin_nearest(\n    bus_network_philadelphia,                     \n    peak_metrics_geo,  \n    how=\"left\",                \n    distance_col=\"distance\")\n\n#Re-project to a geographic CRS\npeak_metrics_network = peak_metrics_network.to_crs(\"EPSG: 4326\")\n\nmin_distance_indices = peak_metrics_network.groupby(\"stop_id\")[\"distance\"].idxmin()\n\n# Filter to keep only the rows with the smallest distance\npeak_metrics_network = peak_metrics_network.loc[min_distance_indices]\npeak_metrics_network.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>shape_id</th>\n      <th>geometry</th>\n      <th>index_right</th>\n      <th>stop_id</th>\n      <th>bus_arrivals</th>\n      <th>frequency</th>\n      <th>headway</th>\n      <th>stop_name</th>\n      <th>stop_lat</th>\n      <th>stop_lon</th>\n      <th>location_type</th>\n      <th>parent_station</th>\n      <th>zone_id</th>\n      <th>wheelchair_boarding</th>\n      <th>Ridership</th>\n      <th>distance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>557</th>\n      <td>286130</td>\n      <td>LINESTRING (-75.15484 39.95283, -75.15471 39.9...</td>\n      <td>1536</td>\n      <td>2</td>\n      <td>23</td>\n      <td>7.666667</td>\n      <td>7.826087</td>\n      <td>Ridge Av &amp; Wissahickon Transfer Center</td>\n      <td>40.014986</td>\n      <td>-75.206826</td>\n      <td>NaN</td>\n      <td>31032.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1188</td>\n      <td>13.528629</td>\n    </tr>\n    <tr>\n      <th>336</th>\n      <td>285851</td>\n      <td>MULTILINESTRING ((-75.20729 40.01490, -75.2070...</td>\n      <td>1534</td>\n      <td>28</td>\n      <td>74</td>\n      <td>24.666667</td>\n      <td>2.432432</td>\n      <td>Wissahickon Transportation Center - onsite</td>\n      <td>40.014897</td>\n      <td>-75.207240</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1930</td>\n      <td>9.163276</td>\n    </tr>\n    <tr>\n      <th>204</th>\n      <td>285686</td>\n      <td>LINESTRING (-75.15737 40.01327, -75.15700 40.0...</td>\n      <td>4715</td>\n      <td>30</td>\n      <td>16</td>\n      <td>5.333333</td>\n      <td>11.250000</td>\n      <td>Pulaski Av &amp; Pike St</td>\n      <td>40.013264</td>\n      <td>-75.157404</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>196</td>\n      <td>10.603432</td>\n    </tr>\n    <tr>\n      <th>291</th>\n      <td>285795</td>\n      <td>LINESTRING (-75.18891 39.98238, -75.18891 39.9...</td>\n      <td>1373</td>\n      <td>55</td>\n      <td>16</td>\n      <td>5.333333</td>\n      <td>11.250000</td>\n      <td>33rd St &amp; Cecil B Moore Av Loop</td>\n      <td>39.982394</td>\n      <td>-75.188946</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101</td>\n      <td>10.994768</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>285888</td>\n      <td>LINESTRING (-75.14218 40.01310, -75.14192 40.0...</td>\n      <td>3692</td>\n      <td>111</td>\n      <td>28</td>\n      <td>9.333333</td>\n      <td>6.428571</td>\n      <td>Frankford Transportation Center - Rts 8 &amp; R drop</td>\n      <td>40.022966</td>\n      <td>-75.078298</td>\n      <td>NaN</td>\n      <td>31033.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1646</td>\n      <td>3.743436</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#10da406e .cell execution_count=16}\n``` {.python .cell-code}\n# check nearest distance\n\nplt.figure(figsize=(8, 6))\n\n# Create histogram\nplt.hist(\n    peak_metrics_network[\"distance\"],\n    bins=range(0, int(peak_metrics_network[\"distance\"].max()) + 10, 10),\n    edgecolor=\"black\",\n    align=\"left\")\n\n\nplt.title(\"Distribution of Roads by Nearest Distance from Bus Stop\", fontsize=16)\nplt.xlabel(\"Distance (units)\", fontsize=12) \nplt.ylabel(\"Number of Roads\", fontsize=12)\nplt.xticks(range(0, int(peak_metrics_network[\"distance\"].max()) + 10, 10))  \nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](gtfs_files/figure-html/cell-17-output-1.png){width=679 height=530}\n:::\n:::\n\n\n### Buses at Peak Hour\n\nFollowing the spatial join, we can now analyze bus headways during peak hours by street segments, providing a more refined view of service levels across different parts of the city. Major corridors in Philadelphia, such as Broad Street, Walnut Street, Chestnut Street, Market Street, and Roosevelt Boulevard, exhibit headways of under 20 minutes, reflecting frequent service. In contrast, streets on the city's periphery have significantly longer headways, exceeding 120 minutes, highlighting areas with less frequent service.\n\nWhen examining ridership by street segments, the distribution tells a different story. Ridership remains relatively consistent across most of the network, regardless of the headways. However, ridership spikes above 2,000 passengers for specific routes in the Upper and Lower Northwest, as well as in West Philadelphia. These areas, particularly in the North, host major transportation hubs that attract a high volume of trips, further emphasizing the need for targeted service improvements in these key zones.\n\n",
    "supporting": [
      "gtfs_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"15a52a7e33e64afa8a8cb857abd1896f\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"VBoxModel\",\"state\":{\"_dom_classes\":[\"widget-interact\"],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"VBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"VBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_5428ba07008e4636a79c8d191cc4f3f2\",\"IPY_MODEL_79cad308ce354438aaaf6915d6859d4b\"],\"layout\":\"IPY_MODEL_91a075a151834dcea1ae844af9b83a6b\",\"tabbable\":null,\"tooltip\":null}},\"5428ba07008e4636a79c8d191cc4f3f2\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"DropdownModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"DropdownModel\",\"_options_labels\":[\"frequency\",\"headway\",\"Ridership\"],\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"DropdownView\",\"description\":\"Metric:\",\"description_allow_html\":false,\"disabled\":false,\"index\":0,\"layout\":\"IPY_MODEL_5a2fc1f15ad5498eb85c3de6fcca0682\",\"style\":\"IPY_MODEL_8cf49cfb4a0d4acfb0494ca53463e1eb\",\"tabbable\":null,\"tooltip\":null}},\"5a2fc1f15ad5498eb85c3de6fcca0682\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"79cad308ce354438aaaf6915d6859d4b\":{\"model_module\":\"@jupyter-widgets/output\",\"model_module_version\":\"1.0.0\",\"model_name\":\"OutputModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/output\",\"_model_module_version\":\"1.0.0\",\"_model_name\":\"OutputModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/output\",\"_view_module_version\":\"1.0.0\",\"_view_name\":\"OutputView\",\"layout\":\"IPY_MODEL_9dd7bf2521fc494d83a12cc379715ea7\",\"msg_id\":\"\",\"outputs\":[{\"ename\":\"NameError\",\"evalue\":\"name 'philly_peak_headways_ridership_geo' is not defined\",\"output_type\":\"error\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mNameError\\u001b[0m                                 Traceback (most recent call last)\",\"File \\u001b[1;32m~\\\\miniforge3\\\\envs\\\\musa-550-fall-2023\\\\lib\\\\site-packages\\\\ipywidgets\\\\widgets\\\\interaction.py:243\\u001b[0m, in \\u001b[0;36minteractive.update\\u001b[1;34m(self, *args)\\u001b[0m\\n\\u001b[0;32m    241\\u001b[0m     value \\u001b[38;5;241m=\\u001b[39m widget\\u001b[38;5;241m.\\u001b[39mget_interact_value()\\n\\u001b[0;32m    242\\u001b[0m     \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mkwargs[widget\\u001b[38;5;241m.\\u001b[39m_kwarg] \\u001b[38;5;241m=\\u001b[39m value\\n\\u001b[1;32m--> 243\\u001b[0m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mresult \\u001b[38;5;241m=\\u001b[39m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mf(\\u001b[38;5;241m*\\u001b[39m\\u001b[38;5;241m*\\u001b[39m\\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mkwargs)\\n\\u001b[0;32m    244\\u001b[0m show_inline_matplotlib_plots()\\n\\u001b[0;32m    245\\u001b[0m \\u001b[38;5;28;01mif\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mauto_display \\u001b[38;5;129;01mand\\u001b[39;00m \\u001b[38;5;28mself\\u001b[39m\\u001b[38;5;241m.\\u001b[39mresult \\u001b[38;5;129;01mis\\u001b[39;00m \\u001b[38;5;129;01mnot\\u001b[39;00m \\u001b[38;5;28;01mNone\\u001b[39;00m:\\n\",\"Cell \\u001b[1;32mIn[14], line 6\\u001b[0m, in \\u001b[0;36mcreate_map\\u001b[1;34m(selected_metric)\\u001b[0m\\n\\u001b[0;32m      4\\u001b[0m \\u001b[38;5;28;01mdef\\u001b[39;00m \\u001b[38;5;21mcreate_map\\u001b[39m(selected_metric):\\n\\u001b[0;32m      5\\u001b[0m     fig, ax \\u001b[38;5;241m=\\u001b[39m plt\\u001b[38;5;241m.\\u001b[39msubplots(figsize\\u001b[38;5;241m=\\u001b[39m(\\u001b[38;5;241m10\\u001b[39m, \\u001b[38;5;241m8\\u001b[39m))\\n\\u001b[1;32m----> 6\\u001b[0m     \\u001b[43mphilly_peak_headways_ridership_geo\\u001b[49m\\u001b[38;5;241m.\\u001b[39mplot(\\n\\u001b[0;32m      7\\u001b[0m         ax\\u001b[38;5;241m=\\u001b[39max,\\n\\u001b[0;32m      8\\u001b[0m         column\\u001b[38;5;241m=\\u001b[39mselected_metric, \\n\\u001b[0;32m      9\\u001b[0m         cmap\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mplasma\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m,            \\n\\u001b[0;32m     10\\u001b[0m         legend\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;28;01mTrue\\u001b[39;00m,              \\n\\u001b[0;32m     11\\u001b[0m         markersize\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;241m2\\u001b[39m)\\n\\u001b[0;32m     14\\u001b[0m     plt\\u001b[38;5;241m.\\u001b[39mtitle(\\u001b[38;5;124mf\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;132;01m{\\u001b[39;00mselected_metric\\u001b[38;5;241m.\\u001b[39mcapitalize()\\u001b[38;5;132;01m}\\u001b[39;00m\\u001b[38;5;124m by Bus Stop\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m, fontsize\\u001b[38;5;241m=\\u001b[39m\\u001b[38;5;241m16\\u001b[39m)\\n\\u001b[0;32m     15\\u001b[0m     plt\\u001b[38;5;241m.\\u001b[39mxlabel(\\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mLongitude\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m)\\n\",\"\\u001b[1;31mNameError\\u001b[0m: name 'philly_peak_headways_ridership_geo' is not defined\"]}],\"tabbable\":null,\"tooltip\":null}},\"8cf49cfb4a0d4acfb0494ca53463e1eb\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"DescriptionStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"DescriptionStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"description_width\":\"\"}},\"91a075a151834dcea1ae844af9b83a6b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"9dd7bf2521fc494d83a12cc379715ea7\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}